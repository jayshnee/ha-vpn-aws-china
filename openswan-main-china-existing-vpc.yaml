AWSTemplateFormatVersion: '2010-09-09'
Description: 'OpenSwan Cluster on AWS'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
            default: OpenSwan VPC Setting
        Parameters:
          - CustomIdentifier
          - VpcId
          - LocalSubnet
          - OpenSwanMasterSubnetID
          - OpenSwanSlaveSubnetID
          
      - Label:
            default: IPSecVPN  EC2 Setting
        Parameters:
          - OpenSwanInstanceType
          - KeypairName
          - OpenSwanMasterPrivateIP
          - OpenSwanSlavePrivateIP
          - SNSEmail
      - Label:
            default: IPSec Phase I Setting
        Parameters:
          - IPSecIKE
          - IPSecIKEmodp
          - IPSecIKELifeTime
          - IPSecSharedSecret
      
      - Label:
           default: IPSecVPN Phase II Setting
        Parameters:
          - IPSecPhaseII
          - IPSecPhaseIIAlg
          - IPSECPhaseIImodp
          - IPSECSALifeTime

      - Label:
            default: Remote Data center setting
        Parameters:
          - RemoteDataCenterSubnet
          - RemoteDataCenterServerIP

Parameters:
    CustomIdentifier:
        Description: AWS Resource CustomIdentifier
        Type: String
        Default: OpenSwan

    VpcId:
      Type: 'AWS::EC2::VPC::Id'
      Description: VpcId of your existing Virtual Private Cloud (VPC)
      ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.

    OpenSwanMasterSubnetID:
      Type: 'AWS::EC2::Subnet::Id'
      Description: The CIDR block for the public subnet for OpenSwanMaster
      ConstraintDescription: must be an existing public subnet in the selected Virtual Private Cloud.  
    
    OpenSwanSlaveSubnetID:
      Type: 'AWS::EC2::Subnet::Id'
      Description: The CIDR block for the public subnet for OpenSwanSlave
      ConstraintDescription: must be an existing public subnet in the selected Virtual Private Cloud.  
    
    LocalSubnet:
      Type: String
      AllowedPattern: >-
        ^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
      ConstraintDescription: must be a valid CIDR block format.
      Description: The Subnet CIDR behind OpenSwan

    OpenSwanMasterPrivateIP:
      Type: String
      Description: 'OpenSwan Master Private IP Address'
    OpenSwanSlavePrivateIP:
      Type: String
      Description: 'OpenSwan Slave Private IP Address'
  
    RemoteDataCenterServerIP:
      Type: String
      Description: 'Remote IP Address'

    RemoteDataCenterSubnet:
      Type: String
      Description: 'The Subnet CIDR of  Remote'
  
    IPSecSharedSecret:
      Default: 'psk123'
      Description: 'The shared secret key for IPSec.'
      Type: String
  
    IPSecIKE:
      Default: 'aes256-sha1'
      AllowedValues:
          - aes128-sha1
          - aes256-sha1
          - 3des-sha1
      Description: 'The IKE Alogrisum.'
      Type: String
    IPSecIKEmodp:
      Default: 'modp1024'
      Description: 'The IKE Alogrisum modp'
      Type: String
    IPSecIKELifeTime:
      Default: '86400s'
      Description: 'The IKE LifeTime'
      Type: String

    IPSecPhaseII:
      Default: 'esp'
      Description: 'The IPSecPhaseII '
      Type: String
    IPSecPhaseIIAlg:
      Default: 'aes256-sha1'
      AllowedValues:
          - aes128-sha1
          - aes256-sha1
          - 3des-sha1
      Description: 'The IPSecPhaseII '
      Type: String
    IPSECPhaseIImodp:
      Default: 'modp1024'
      Description: 'The IPSecPhaseII Alogrisum modp'
      Type: String
    IPSECSALifeTime:
      Default: '3600s'
      Description: 'The IPSecPhaseII SA LifeTime'
      Type: String

    OpenSwanInstanceType:
      Default: c5.large
      AllowedValues:
          - c5.large
          - c5.xlarge
          - c5.2xlarge
          - c5.4xlarge
          - m5.large
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
      Description: "The instance type to use for the OpenSwan."
      Type: String
    KeypairName:
      Type: 'AWS::EC2::KeyPair::KeyName'
      ConstraintDescription: must specify an admin access key pair for openswan instances.
      Description: Amazon EC2 Key Pair for admin access.

    SNSEmail:
      Default: 'test@amazon.com'
      Type: String
      Description: 'SNS EMail - Need change to your own email address '

Mappings:
  RegionMap:
    'cn-north-1':
      AMI: 'ami-0dd06fbcbb6cf837f'
    'cn-northwest-1':
      AMI: 'ami-057a5918790ce5037'
Resources:
  EC2OpenSwanRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2OpenSwanRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com.cn"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: OpenSwanPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AssignPrivateIpAddresses'
                  - 'ec2:DetachNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:*'
                  - 'ssm:*'
                  - 'ssmmessages:*'
                  - 'ec2messages:*'
                  - 'sns:*'
                Resource: '*'

  EC2OpenSwanProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref EC2OpenSwanRole
  EIP:
    Type: AWS::EC2::EIP

  EIPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref EC2OpenSwanInstanceMaster
      EIP: !Ref EIP
  
  OpenSwanInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'OpenSwan Security Group'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: 500
        ToPort: 500
        CidrIp: '0.0.0.0/0'
      - IpProtocol: udp
        FromPort: 4500
        ToPort: 4500
        CidrIp: '0.0.0.0/0'

  OpenSwanHASNSSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !Ref SNSEmail
      Protocol: email
      TopicArn: !Ref OpenSwanHASNSTopic
  
  OpenSwanHASNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: "OpenSwanHAStatusSNS"
      TopicName: "OpenSwanHAStatusSNS"

  OpenSwanHASNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: SnsTopicPolicy
            Effect: Allow
            Principal:
              AWS: '*'
            Action: sns:Subscribe
            Resource: !Ref OpenSwanHASNSTopic
        Topics:
          - Ref: OpenSwanHASNSTopic

  EC2OpenSwanInstanceSlave:
      Type: 'AWS::EC2::Instance'
      Properties:
        InstanceType: !Ref OpenSwanInstanceType
        IamInstanceProfile: !Ref EC2OpenSwanProfile
        PrivateIpAddress: !Ref OpenSwanSlavePrivateIP
        SourceDestCheck: False
        SecurityGroupIds:
        - !Ref OpenSwanInstanceSecurityGroup
        KeyName: !Ref KeypairName
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        SubnetId: !Ref OpenSwanSlaveSubnetID
        Tags:
          - Key: "Name"
            Value: "OpenSwanSlave"
        UserData:
          'Fn::Base64': !Sub |

            #!/bin/bash -ex
            
            #PRIVATE_IP="$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
            PUBLIC_IP=${EIP}

            #set timezone
            timedatectl set-timezone Asia/Shanghai
            
            #sudo yum upgrade -y
            sudo yum install -y openswan keepalived

            echo "net.ipv4.ip_forward = 1" |  tee -a /etc/sysctl.conf
            echo "net.ipv4.conf.all.accept_redirects = 0" |  tee -a /etc/sysctl.conf
            echo "net.ipv4.conf.all.send_redirects = 0" |  tee -a /etc/sysctl.conf
            for vpn in /proc/sys/net/ipv4/conf/*; do echo 0 > $vpn/accept_redirects; echo 0 > $vpn/send_redirects; done
            for i in /proc/sys/net/ipv4/conf/*;do echo 0 > $i/rp_filter;done
            sysctl -p

            cat > /etc/ipsec.d/ipsec.conf <<EOF
            config setup
                    dumpdir=/var/run/pluto/
                    nat_traversal=yes
                    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
                    oe=off
                    protostack=netkey
                    nhelpers=0
                    interfaces=%defaultroute
            conn openswan
                    authby=secret
                    type=tunnel
                    auto=start     

                    left=${OpenSwanSlavePrivateIP}
                    leftid=$PUBLIC_IP
                    leftsubnet=${LocalSubnet}           
                    leftnexthop=%defaultroute

                    right=${RemoteDataCenterServerIP}                   
                    rightsubnet=${RemoteDataCenterSubnet} 
                    rightnexthop=%defaultroute

                    ike=${IPSecIKE};${IPSecIKEmodp}
                    ikelifetime=${IPSecIKELifeTime}
                    phase2=${IPSecPhaseII}
                    phase2alg=${IPSecPhaseIIAlg};${IPSECPhaseIImodp}
                    salifetime=${IPSECSALifeTime}
                    pfs=yes


            EOF

            
            cat > /etc/ipsec.d/ipsec.secrets <<EOF
            $PUBLIC_IP  ${RemoteDataCenterServerIP} : PSK "${IPSecSharedSecret}"
            EOF
            

            iptables -t nat -A POSTROUTING -j MASQUERADE
            echo 1 > /proc/sys/net/ipv4/ip_forward
            iptables-save > /etc/iptables.rules

            mkdir -p /etc/network/if-pre-up.d

            cat > /etc/network/if-pre-up.d/iptablesload <<EOF
            #!/bin/sh
            iptables-restore < /etc/iptables.rules
            echo 1 > /proc/sys/net/ipv4/ip_forward
            exit 0
            EOF

            service ipsec start
            chkconfig ipsec on
            ipsec status

            #setup keepalived
            cat > /etc/keepalived/keepalived.conf <<EOF
            global_defs 
            {
                script_user ec2-user
                enable_script_security
            }

            vrrp_script check_openswan 
            {
                script "/usr/sbin/pidof /usr/libexec/ipsec/pluto"
                interval 3
                fall 10
                rise 10
                weight -30
                user ec2-user
            }

            vrrp_instance OpenSwan 
            {
                debug 4
                state BACKUP
                interface eth0
                smtp_alert
                virtual_router_id 51
                priority 100

                unicast_src_ip ${OpenSwanSlavePrivateIP}

                unicast_peer 
                {
                    ${OpenSwanMasterPrivateIP}
                }

                advert_int 1
                authentication
                {
                    auth_type PASS
                    auth_pass 12345678
                }

                track_script 
                {
                    check_openswan
                }

                notify_master "/etc/keepalived/failover.sh"
                notify_backup "/etc/keepalived/failover.sh"
                notify "/etc/keepalived/failover.sh"
            }
            EOF

            cat > /etc/keepalived/failover.sh <<EOF
            #!/bin/bash
            TYPE=\$1
            NAME=\$2
            STATE=\$3

            case \$STATE in
                    "MASTER") sudo /usr/sbin/service ipsec restart
                              sudo echo "master state and restart ipsec in backup node"
                              exit 0
                              ;;
                    "BACKUP") exit 0
                              ;;

            esac
            EOF

            chmod +x  /etc/keepalived/failover.sh
            chmod 777 /etc/keepalived/failover.sh
            service keepalived start
            chkconfig keepalived on
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2OpenSwanInstanceSlave  --region ${AWS::Region}
  
  EC2OpenSwanInstanceMaster:
      Type: 'AWS::EC2::Instance'
      DependsOn: 
        - EIP 
        - EC2OpenSwanInstanceSlave
      Properties:
        InstanceType: !Ref OpenSwanInstanceType
        IamInstanceProfile: !Ref EC2OpenSwanProfile
        SourceDestCheck: False
        PrivateIpAddress: !Ref OpenSwanMasterPrivateIP
        SecurityGroupIds:
        - !Ref OpenSwanInstanceSecurityGroup
        KeyName: !Ref KeypairName
        ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
        SubnetId: !Ref OpenSwanMasterSubnetID
        Tags:
          - Key: "Name"
            Value: "OpenSwanMaster"

        UserData:
          'Fn::Base64': !Sub |

            #!/bin/bash -ex

            
            #PRIVATE_IP="$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)"
            
            #set timezone
            timedatectl set-timezone Asia/Shanghai

            #yum upgrade -y
            yum install -y openswan keepalived

            PUBLIC_IP=${EIP}

            echo "net.ipv4.ip_forward = 1" |  tee -a /etc/sysctl.conf
            echo "net.ipv4.conf.all.accept_redirects = 0" |  tee -a /etc/sysctl.conf
            echo "net.ipv4.conf.all.send_redirects = 0" |  tee -a /etc/sysctl.conf
            for vpn in /proc/sys/net/ipv4/conf/*; do echo 0 > $vpn/accept_redirects; echo 0 > $vpn/send_redirects; done
            for i in /proc/sys/net/ipv4/conf/*;do echo 0 > $i/rp_filter;done
            sysctl -p

            cat > /etc/ipsec.d/ipsec.conf <<EOF
            config setup
                    dumpdir=/var/run/pluto/
                    nat_traversal=yes
                    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
                    oe=off
                    protostack=netkey
                    nhelpers=0
                    interfaces=%defaultroute
            conn openswan
                    authby=secret
                    type=tunnel
                    auto=start     

                    left=${OpenSwanMasterPrivateIP}
                    leftid=$PUBLIC_IP
                    leftsubnet=${LocalSubnet}           
                    leftnexthop=%defaultroute

                    right=${RemoteDataCenterServerIP}                   
                    rightsubnet=${RemoteDataCenterSubnet} 
                    rightnexthop=%defaultroute

                    ike=${IPSecIKE};${IPSecIKEmodp}
                    ikelifetime=${IPSecIKELifeTime}
                    phase2=${IPSecPhaseII}
                    phase2alg=${IPSecPhaseIIAlg};${IPSECPhaseIImodp}
                    salifetime=${IPSECSALifeTime}
                    pfs=yes


            EOF

            
            cat > /etc/ipsec.d/ipsec.secrets <<EOF
            $PUBLIC_IP  ${RemoteDataCenterServerIP} : PSK "${IPSecSharedSecret}"
            EOF
            

            iptables -t nat -A POSTROUTING -j MASQUERADE
            echo 1 > /proc/sys/net/ipv4/ip_forward
            iptables-save > /etc/iptables.rules

            mkdir -p /etc/network/if-pre-up.d
            cat > /etc/network/if-pre-up.d/iptablesload <<EOF
            #!/bin/sh
            iptables-restore < /etc/iptables.rules
            echo 1 > /proc/sys/net/ipv4/ip_forward
            exit 0
            EOF

            service ipsec start
            chkconfig ipsec on
            ipsec status

            #setup keepalived
            cat > /etc/keepalived/keepalived.conf <<EOF
            global_defs 
            {
                script_user ec2-user
                enable_script_security
            }

            vrrp_script check_openswan 
            {
                script "/usr/sbin/pidof  /usr/libexec/ipsec/pluto"
                interval 3
                fall 10
                rise 10
                weight -30
                user ec2-user
            }

            vrrp_instance OpenSwan 
            {
                debug 4
                state MASTER
                interface eth0
                virtual_router_id 51
                priority 120
                unicast_src_ip ${OpenSwanMasterPrivateIP}

                unicast_peer 
                {
                    ${OpenSwanSlavePrivateIP}
                }
                advert_int 1
                authentication
                {
                    auth_type PASS
                    auth_pass 12345678
                }

                track_script 
                {
                    check_openswan
                }

                notify_master "/etc/keepalived/failover.sh"
                notify_backup "/etc/keepalived/failover.sh"
                notify "/etc/keepalived/failover.sh"
            }
            EOF

            cat > /etc/keepalived/failover.sh <<EOF
            #!/bin/bash
            TYPE=\$1
            NAME=\$2
            STATE=\$3

            case \$STATE in
                    "MASTER") 
                        sudo /usr/sbin/service ipsec start
                        sudo echo "master state and start ipsec vpn"
                        exit 0
                        ;;
                    "BACKUP") EIP=${EIP}
                        INSTANCE_ID=${EC2OpenSwanInstanceSlave}
                        echo "********************************"
                        sudo aws sns publish  --topic-arn "${OpenSwanHASNSTopic}"  --message "OpenSwanVPN Master server Down and switched to Slave server."  --region ${AWS::Region}
                        sudo aws ec2 disassociate-address --public-ip ${EIP} --region ${AWS::Region}
                        sudo aws ec2 associate-address --public-ip ${EIP} --instance-id ${EC2OpenSwanInstanceSlave} --region ${AWS::Region}
                        exit 0
                        ;;
            esac
            EOF

            chmod +x  /etc/keepalived/failover.sh
            chmod 777 /etc/keepalived/failover.sh
            
            service keepalived start
            chkconfig keepalived on

            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2OpenSwanInstanceMaster  --region ${AWS::Region}

      CreationPolicy:
        ResourceSignal:
          Count: 1
          Timeout: PT20M

Outputs:
  EC2OpenSwanMasterInstanceEIP:
    Description: 'Public IP address of the vpn server'
    Value: !Ref EIP
  EC2OpenSwanMasterInstancePrivateIP:
    Description: 'Private IP address of the vpn server'
    Value: !GetAtt 'EC2OpenSwanInstanceMaster.PrivateIp'
  EC2OpenSwanSlaveInstancePrivateIP:
    Description: 'Private IP address of the vpn server'
    Value: !GetAtt 'EC2OpenSwanInstanceSlave.PrivateIp'
  IPSecSharedSecret:
    Description: 'The shared key for the VPN connection (IPSec)'
    Value: !Ref IPSecSharedSecret